import React, { useEffect, useRef, useState } from "react";
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  Alert,
  StyleSheet,
  TextInput,
  Platform,
} from "react-native";
import DateTimePickerModal from "react-native-modal-datetime-picker";
import { Ionicons } from "@expo/vector-icons";
import { RichEditor, RichToolbar, actions } from "react-native-pell-rich-editor";
import { useNavigation } from "@react-navigation/native";
import { AgeType, EducationLevel, ExperienceLevel, getEnumOptions, JobGender, JobLevel, JobType, LevelCompanySize, SalaryType, SalaryUnit } from "../../utilities/constant";
import { Dropdown } from "react-native-element-dropdown";
import { getAllIndustries, Industry } from "../../services/industryService";
import { getAllProvince, Province } from "../../services/provinceService";
import { District, getDistrictById, getDistrictsByProvince } from "../../services/districtService";
import { createJob, getJobById, JobRequest, updateJob } from "../../services/jobService";
import { JobLocation } from "../../types/type";

const UpdateJobScreen = ({ route }: any) => {

  const { id } = route.params as { id: number };
  const navigation = useNavigation();
  //-- Province
  const [listProvinces, setListProvinces] = useState<Province[]>([])

  // --- Th√¥ng tin c√¥ng ty ---
  const [companyName, setCompanyName] = useState("");
  const [companySize, setCompanySize] = useState("");
  const [companyWebSite, setCompanyWebSite] = useState("");
  const [aboutCompany, setAboutCompany] = useState("");

  // --- Th√¥ng tin c√¥ng vi·ªác ---
  const [jobTitle, setJobTitle] = useState("");
  const [jobProvincedId, setJobProvinceId] = useState<number | null>(null);
  const [jobDistrictdId, setJobDistrictId] = useState<number | null>(null);

  const [jobLocations, setJobLocations] = useState<JobLocation[]>([]);

  const [jobDetailAddress, setJobDetailAddress] = useState("");
  const [salaryType, setSalaryType] = useState<string>("");
  const [minSalary, setMinSalary] = useState<number | null>(null);
  const [maxSalary, setMaxSalary] = useState<number | null>(null);
  const [salaryUnit, setSalaryUnit] = useState("");
  const [jobDescription, setJobDescription] = useState("")
  const [requirement, setRequirement] = useState("")
  const [listJobDistricts, setListJobDistricts] = useState<District[]>([])

  // --- Chi ti·∫øt c√¥ng vi·ªác ---
  const [jobLevel, setJobLevel] = useState("");
  const [jobType, setJobType] = useState("");
  const [jobGender, setJobGender] = useState("");
  const [jobCode, setJobCode] = useState("");

  const [education, setEducation] = useState("");
  const [experience, setExperience] = useState("");
  const [selectIndustryList, setSelectIndustryList] = useState<(number | null)[]>([null]);
  const [ageType, setAgeType] = useState("");
  const [minAge, setMinAge] = useState<number | null>(null);
  const [maxAge, setMaxAge] = useState<number | null>(null);


  const [industries, setIndustries] = useState<Industry[]>([]);




  const [contactName, setContactName] = useState("");
  const [contactPhone, setContactPhone] = useState("");
  const [contactProvinceId, setContactProvinceId] = useState<number | null>(null);
  const [contactDistrictdId, setContactDistrictId] = useState<number | null>(null);
  const [contactDetailAddress, setContactDetailAddress] = useState("");
  const [description, setDescription] = useState("");

  const [listContactDistricts, setListContactDistrict] = useState<District[]>([])



  const [expiryDate, setExpiryDate] = useState(new Date());
  const [isDatePickerVisible, setDatePickerVisibility] = useState(false);


  // --- Editor ---

  const richAboutCompany = useRef<RichEditor>(null);
  const richContact = useRef<RichEditor>(null);
  const richRequirement = useRef<RichEditor>(null);
  const richJobDescription = useRef<RichEditor>(null);
  useEffect(() => {
    if (richAboutCompany.current && aboutCompany) {
      richAboutCompany.current.setContentHTML(aboutCompany);
    }
  }, [aboutCompany]);
  useEffect(() => {
    if (richContact.current && description) {
      richContact.current.setContentHTML(description);
    }
  }, [description]);
  useEffect(() => {
    if (richRequirement.current && requirement) {
      richRequirement.current.setContentHTML(requirement);
    }
  }, [requirement]);
  useEffect(() => {
    if (richJobDescription.current && jobDescription) {
      richJobDescription.current.setContentHTML(jobDescription);
    }
  }, [jobDescription]);

  // --- H√†m submit ---
  const handleSubmit = async () => {
    try {
      // ======== 1Ô∏è‚É£ VALIDATE C√ÅC TR∆Ø·ªúNG B·∫ÆT BU·ªòC ========
      if (!companyName.trim()) {
        Alert.alert("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p t√™n c√¥ng ty");
        return;
      }
      if (!companySize) {
        Alert.alert("Thi·∫øu th√¥ng tin", "Vui l√≤ng ch·ªçn quy m√¥ c√¥ng ty");
        return;
      }
      if (!aboutCompany.trim()) {
        Alert.alert("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p m√¥ t·∫£ c√¥ng ty");
        return;
      }
      if (!jobDistrictdId) {
        Alert.alert("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p t√™n district");
        return;
      }
      if (!jobTitle.trim()) {
        Alert.alert("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p t√™n c√¥ng vi·ªác");
        return;
      }
      if (!salaryType) {
        Alert.alert("Thi·∫øu th√¥ng tin", "Vui l√≤ng ch·ªçn lo·∫°i l∆∞∆°ng");
        return;
      }
      if (salaryType === "RANGE" && (!minSalary || !maxSalary || minSalary >= maxSalary)) {
        Alert.alert("Sai ƒë·ªãnh d·∫°ng", "Vui l√≤ng nh·∫≠p m·ª©c l∆∞∆°ng h·ª£p l·ªá (Min < Max)");
        return;
      }
      if (salaryType === "GREATER_THAN" && !minSalary) {
        Alert.alert("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p m·ª©c l∆∞∆°ng t·ªëi thi·ªÉu");
        return;
      }
      if (!jobDescription.trim()) {
        Alert.alert("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p m√¥ t·∫£ c√¥ng vi·ªác");
        return;
      }
      if (!requirement.trim()) {
        Alert.alert("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p y√™u c·∫ßu c√¥ng vi·ªác");
        return;
      }
      if (!contactName.trim() || !contactPhone.trim()) {
        Alert.alert("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p ng∆∞·ªùi li√™n h·ªá v√† s·ªë ƒëi·ªán tho·∫°i");
        return;
      }
      // ======== 2Ô∏è‚É£ T·∫†O D·ªÆ LI·ªÜU JOBREQUEST ========
      const jobData: JobRequest = {
        companyName,
        companySize,
        companyWebsite: companyWebSite || undefined,
        aboutCompany,
        jobTitle,

        jobLocations: [
          {
            provinceId: jobProvincedId ?? -1,
            districtId: jobDistrictdId ?? -1,
            detailAddress: jobDetailAddress,
          },
        ],
        salaryType,
        minSalary: minSalary || undefined,
        maxSalary: maxSalary || undefined,
        salaryUnit: salaryUnit || undefined,
        jobDescription,
        requirement,
        educationLevel: education,
        experienceLevel: experience,
        jobLevel,
        jobType,
        gender: jobGender,
        jobCode,
        industryIds: selectIndustryList.filter((id): id is number => id !== null),
        ageType,
        minAge: minAge || undefined,
        maxAge: maxAge || undefined,
        contactPerson: contactName,
        phoneNumber: contactPhone,
        contactLocation: {
          provinceId: contactProvinceId!,
          districtId: contactDistrictdId!,
          detailAddress: contactDetailAddress || "",
        },
        description: description || undefined,
        expirationDate: formatDate(expiryDate)
      };
      // ======== 3Ô∏è‚É£ G·ªåI API ========
      console.log("üì¶ jobData g·ª≠i l√™n:", JSON.stringify(jobData, null, 2));
      const res = await updateJob(id, jobData);
      if (res.status === 200) {
        Alert.alert("üéâ Th√†nh c√¥ng", "C√¥ng vi·ªác ƒë√£ ƒë∆∞·ª£c ƒëƒÉng!");
        navigation.goBack()
      } else {
        Alert.alert("L·ªói", res.message || "Kh√¥ng th·ªÉ ƒëƒÉng c√¥ng vi·ªác.");
      }
    } catch (error: any) {
      if (error.response) {
        console.error("‚ùå L·ªói khi t·∫°o job:", JSON.stringify(error.response.data, null, 2));
        if (error.response.data.errors) {
          console.table(error.response.data.errors);
        }
      } else {
        console.error("‚ùå L·ªói khi t·∫°o job:", error.message);
      }
    }
  };

  // --- X·ª≠ l√Ω ch·ªçn ng√†y h·∫øt h·∫°n ---
  const handleConfirm = (date: Date) => {
    setExpiryDate(date);
    setDatePickerVisibility(false);
  };

  // --- H√†m ·∫©n DatePicker ---
  const hideDatePicker = () => {
    setDatePickerVisibility(false);
  };

  // --- H√†m format theo dd/MM/yyyy ---
  const formatDate = (date: Date) => {
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
  };
  useEffect(() => {
    let cancelled = false; // flag ƒë·ªÉ tr√°nh setState sau unmount

    const load = async () => {
      try {
        const job = await getJobById(id);
        const data = await getAllIndustries();
        const listProvinces = await getAllProvince(); // g·ªçi service b·∫°n ƒë√£ vi·∫øt
        if (cancelled) return;

        setIndustries(data);
        setListProvinces(listProvinces)

        setCompanyName(job.companyName || "");
        setCompanySize(job.companySize || "");
        setCompanyWebSite(job.companyWebsite || "");
        setAboutCompany(job.aboutCompany || "");

        setJobTitle(job.jobTitle || "");
        setSalaryType(job.salaryType || "");
        setMinSalary(job.minSalary || null);
        setMaxSalary(job.maxSalary || null);
        setSalaryUnit(job.salaryUnit || "");

        setJobDescription(job.jobDescription || "");
        setRequirement(job.requirement || "");

        setEducation(job.educationLevel || "");
        setExperience(job.experienceLevel || "");
        setJobLevel(job.jobLevel || "");
        setJobType(job.jobType || "");
        setJobGender(job.gender || "");
        setJobCode(job.jobCode || "");
        setAgeType(job.ageType || "");
        setMinAge(job.minAge || null);
        setMaxAge(job.maxAge || null);
        setDescription(job.description || "");

        // --- Ng√†nh ngh·ªÅ ---
        if (job.industries && job.industries.length > 0) {
          setSelectIndustryList(job.industries.map((i: any) => i.id));
        }


        // --- ƒê·ªãa ch·ªâ l√†m vi·ªác ---
        if (job.jobLocations && job.jobLocations.length > 0) {
          const loc = job.jobLocations[0];
          setJobProvinceId(loc.province?.id || null);
          setJobDistrictId(loc.district?.id || null);
          setJobDetailAddress(loc.detailAddress || "");
        }

        // --- Li√™n h·ªá ---
        setContactName(job.contactPerson || "");
        setContactPhone(job.phoneNumber || "");
        if (job.contactLocation) {
          setContactProvinceId(job.contactLocation.province?.id || null);
          setContactDistrictId(job.contactLocation.district?.id || null);
          setContactDetailAddress(job.contactLocation.detailAddress || "");
        }

        // --- Ng√†y h·∫øt h·∫°n ---
        if (job.expirationDate) {
          // Backend tr·∫£ ISO date ‚Üí chuy·ªÉn sang Date object
          setExpiryDate(new Date(job.expirationDate));
        }
      } catch (err: any) {
        if (cancelled) return;
        console.error("L·ªói load", err);
      } finally {
        if (!cancelled) { }
      }
    };

    load();

    return () => {
      cancelled = true;
    };
  }, []);
  useEffect(() => {
    if (jobProvincedId) {
      (async () => {
        try {
          const data = await getDistrictsByProvince(jobProvincedId);
          setListJobDistricts(data)
        } catch (error) {
          console.error("L·ªói khi l·∫•y qu·∫≠n/huy·ªán:", error);
          setListJobDistricts([])
        } finally {

        }
      })();
    } else {
      setListJobDistricts([])
      //setJobDistrictId(null);
    }
  }, [jobProvincedId]);

  useEffect(() => {
    if (contactProvinceId) {
      (async () => {
        try {
          const data = await getDistrictsByProvince(contactProvinceId);
          setListContactDistrict(data)
        } catch (error) {
          console.error("L·ªói khi l·∫•y qu·∫≠n/huy·ªán:", error);
          setListJobDistricts([])
        } finally {

        }
      })();
    } else {
      setListContactDistrict([])
      //setContactDistrictId(null);
    }
  }, [contactProvinceId]);
  return (
    <View style={styles.container}>
      {/* ---------- HEADER ---------- */}
      <View style={styles.header}>
        <Ionicons name="arrow-back" size={24} color="#000000ff" onPress={() => navigation.goBack()} />
        <Text style={styles.headerTitle}>S·ª≠a tin tuy·ªÉn d·ª•ng</Text>
        <View style={{ width: 24 }} />
      </View>

      <ScrollView showsVerticalScrollIndicator={false}>
        {/* ---------- TH√îNG TIN C√îNG TY ---------- */}
        <Text style={styles.title}>Th√¥ng tin c√¥ng ty</Text>

        <Text style={styles.label}>
          T√™n c√¥ng ty<Text style={styles.required}>*</Text>
        </Text>
        <TextInput
          style={styles.input}
          placeholder="VD: NPT Software"
          value={companyName}
          onChangeText={setCompanyName}
        />

        <Text style={styles.label}>
          S·ªë nh√¢n vi√™n<Text style={styles.required}>*</Text>
        </Text>
        <Dropdown
          data={getEnumOptions(LevelCompanySize)}
          labelField="label"
          valueField="value"
          placeholder="Ch·ªçn s·ªë nh√¢n vi√™n"
          value={companySize}
          onChange={(item) => setCompanySize(item.value)}
          style={styles.dropdown}
          placeholderStyle={styles.placeholder}
          selectedTextStyle={styles.selectedText}
        />

        <Text style={styles.label}>Website c√¥ng ty</Text>
        <TextInput
          style={styles.input}
          placeholder="VD: https://nptsoftware.vn"
          value={companyWebSite}
          onChangeText={setCompanyWebSite}
        />

        <Text style={styles.label}>
          S∆° l∆∞·ª£c c√¥ng ty<Text style={styles.required}>*</Text>
        </Text>
        <View style={styles.richContainer}>
          <RichToolbar
            editor={richAboutCompany}
            actions={[actions.setBold, actions.setItalic, actions.setUnderline, actions.insertBulletsList]}
            style={styles.toolbar}
          />
          <RichEditor
            ref={richAboutCompany}
            placeholder="Gi·ªõi thi·ªáu ng·∫Øn g·ªçn v·ªÅ c√¥ng ty..."
            style={styles.richEditor}
            initialHeight={150}
            onChange={setAboutCompany}
            initialContentHTML={aboutCompany}
          />
        </View>

        {/* ---------- TH√îNG TIN C√îNG VI·ªÜC ---------- */}
        <Text style={styles.title}>Th√¥ng tin c√¥ng vi·ªác</Text>

        <Text style={styles.label}>
          T√™n c√¥ng vi·ªác<Text style={styles.required}>*</Text>
        </Text>
        <TextInput
          style={styles.input}
          placeholder="VD: L·∫≠p tr√¨nh vi√™n React Native"
          value={jobTitle}
          onChangeText={setJobTitle}
        />

        <Text style={styles.label}>
          ƒê·ªãa ƒëi·ªÉm<Text style={styles.required}>*</Text>
        </Text>
        <Dropdown
          data={listProvinces}
          labelField="name"
          valueField="id"
          placeholder="Ch·ªçn T·ªânh / Th√†nh ph·ªë"
          value={jobProvincedId}
          onChange={(item) => {
            setJobProvinceId(item.id)
          }}
          style={styles.dropdown}
          placeholderStyle={styles.placeholder}
          selectedTextStyle={styles.selectedText}
        />

        {/* --- Qu·∫≠n / Huy·ªán --- */}
        <Dropdown
          data={listJobDistricts}
          labelField="name"
          valueField="id"
          placeholder="Ch·ªçn Qu·∫≠n / Huy·ªán"
          value={jobDistrictdId}
          onChange={(item) => {
            console.log(item.id)
            setJobDistrictId(item.id)
          }}
          style={styles.dropdown}
          placeholderStyle={styles.placeholder}
          selectedTextStyle={styles.selectedText}
        />

        {/* --- S·ªë nh√† / ƒê·ªãa ch·ªâ chi ti·∫øt --- */}
        <TextInput
          style={styles.input}
          placeholder="VD: 123 Nguy·ªÖn Tr√£i, Ph∆∞·ªùng 5"
          value={jobDetailAddress}
          onChangeText={setJobDetailAddress}
        />

        <Text style={styles.label}>
          L∆∞∆°ng<Text style={styles.required}>*</Text>
        </Text>

        {/* --- Dropdown ch·ªçn lo·∫°i l∆∞∆°ng --- */}
        <Dropdown
          data={getEnumOptions(SalaryType)}
          labelField="label"
          valueField="value"
          placeholder="Ch·ªçn m·ª©c l∆∞∆°ng"
          value={salaryType}
          onChange={(item) => {
            console.log(typeof salaryType, salaryType);
            console.log(typeof SalaryType.GREATER_THAN, SalaryType.GREATER_THAN);
            setSalaryType(item.value)
          }
          }
          style={styles.dropdown}
          placeholderStyle={styles.placeholder}
          selectedTextStyle={styles.selectedText}
        />

        {/* --- N·∫øu ch·ªçn ‚ÄúTr√™n‚Äù --- */}
        {salaryType === "GREATER_THAN" && (
          <View style={{ flexDirection: "row", alignItems: "center", marginHorizontal: 16, gap: 8 }}>
            <TextInput
              style={[styles.input, { flex: 1 }]}
              placeholder="Nh·∫≠p m·ª©c l∆∞∆°ng t·ªëi thi·ªÉu"
              keyboardType="numeric"
              value={minSalary?.toString() ?? ""}   // number -> string
              onChangeText={(text) => {
                setMinSalary(text ? parseFloat(text) : null);
              }}
            />
            <Dropdown
              data={getEnumOptions(SalaryUnit)}
              labelField="label"
              valueField="value"
              placeholder="ƒê∆°n v·ªã"
              value={salaryUnit}
              onChange={(item) => setSalaryUnit(item.value)}
              style={[styles.dropdown, { flex: 1 }]}
              placeholderStyle={styles.placeholder}
              selectedTextStyle={styles.selectedText}
            />
          </View>
        )}

        {/* --- N·∫øu ch·ªçn ‚ÄúTrong kho·∫£ng‚Äù --- */}
        {salaryType === "RANGE" && (
          <View style={{ flexDirection: "row", alignItems: "center", marginHorizontal: 16, gap: 8 }}>
            <TextInput
              style={[styles.input, { flex: 1 }]}
              placeholder="Min"
              keyboardType="numeric"
              value={minSalary?.toString() ?? ""}   // number -> string
              onChangeText={(text) => {
                setMinSalary(text ? parseFloat(text) : null);
              }}
            />
            <TextInput
              style={[styles.input, { flex: 1 }]}
              placeholder="Max"
              keyboardType="numeric"
              value={maxSalary?.toString() ?? ""}   // number -> string
              onChangeText={(text) => {
                setMaxSalary(text ? parseFloat(text) : null);
              }}
            />
            <Dropdown
              data={getEnumOptions(SalaryUnit)}
              labelField="label"
              valueField="value"
              placeholder="ƒê∆°n v·ªã"
              value={salaryUnit}
              onChange={(item) => setSalaryUnit(item.value)}
              style={[styles.dropdown, { flex: 1 }]}
              placeholderStyle={styles.placeholder}
              selectedTextStyle={styles.selectedText}
            />
          </View>
        )}

        <Text style={styles.label}>M√¥ t·∫£ c√¥ng vi·ªác</Text>
        <View style={styles.richContainer}>
          <RichToolbar
            editor={richJobDescription}
            actions={[actions.setBold, actions.setItalic, actions.setUnderline]}
            style={styles.toolbar}
          />
          <RichEditor
            ref={richJobDescription}
            placeholder="Th√¥ng tin m√¥ t·∫£ chi ti·∫øt..."
            style={styles.richEditor}
            initialHeight={120}
            onChange={setJobDescription}
            initialContentHTML={jobDescription}
          />
        </View>

        <Text style={styles.label}>Y√™u c·∫ßu c√¥ng vi·ªác</Text>
        <View style={styles.richContainer}>
          <RichToolbar
            editor={richRequirement}
            actions={[actions.setBold, actions.setItalic, actions.setUnderline]}
            style={styles.toolbar}
          />
          <RichEditor
            ref={richRequirement}
            placeholder="Th√¥ng tin m√¥ t·∫£ chi ti·∫øt..."
            style={styles.richEditor}
            initialHeight={120}
            onChange={setRequirement}
            initialContentHTML={requirement}
          />
        </View>

        {/* ---------- CHI TI·∫æT C√îNG VI·ªÜC ---------- */}
        <Text style={styles.title}>Chi ti·∫øt c√¥ng vi·ªác</Text>

        <Text style={styles.label}>
          Tr√¨nh ƒë·ªô h·ªçc v·∫•n<Text style={styles.required}>*</Text>
        </Text>
        <Dropdown
          data={getEnumOptions(EducationLevel)}
          labelField="label"
          valueField="value"
          placeholder="Ch·ªçn tr√¨nh ƒë·ªô h·ªçc v·∫•n"
          value={education}
          onChange={(item) => setEducation(item.value)}
          style={styles.dropdown}
          placeholderStyle={styles.placeholder}
          selectedTextStyle={styles.selectedText}
        />

        <Text style={styles.label}>
          M·ª©c kinh nghi·ªám<Text style={styles.required}>*</Text>
        </Text>
        <Dropdown
          data={getEnumOptions(ExperienceLevel)}
          labelField="label"
          valueField="value"
          placeholder="Ch·ªçn kinh nghi·ªám l√†m vi·ªác"
          value={experience}
          onChange={(item) => setExperience(item.value)}
          style={styles.dropdown}
          placeholderStyle={styles.placeholder}
          selectedTextStyle={styles.selectedText}
        />

        <Text style={styles.label}>
          C·∫•p b·∫≠c<Text style={styles.required}>*</Text>
        </Text>
        <Dropdown
          data={getEnumOptions(JobLevel)}
          labelField="label"
          valueField="value"
          placeholder="Ch·ªçn c·∫•p b·∫≠c"
          value={jobLevel}
          onChange={(item) => setJobLevel(item.value)}
          style={styles.dropdown}
          placeholderStyle={styles.placeholder}
          selectedTextStyle={styles.selectedText}
        />

        <Text style={styles.label}>
          Lo·∫°i c√¥ng vi·ªác<Text style={styles.required}>*</Text>
        </Text>
        <Dropdown
          data={getEnumOptions(JobType)}
          labelField="label"
          valueField="value"
          placeholder="Ch·ªçn lo·∫°i c√¥ng vi·ªác"
          value={jobType}
          onChange={(item) => setJobType(item.value)}
          style={styles.dropdown}
          placeholderStyle={styles.placeholder}
          selectedTextStyle={styles.selectedText}
        />

        <Text style={styles.label}>
          Gi·ªõi t√≠nh<Text style={styles.required}>*</Text>
        </Text>
        <Dropdown
          data={getEnumOptions(JobGender)}
          labelField="label"
          valueField="value"
          placeholder="Ch·ªçn gi·ªõi t√≠nh"
          value={jobGender}
          onChange={(item) => setJobGender(item.value)}
          style={styles.dropdown}
          placeholderStyle={styles.placeholder}
          selectedTextStyle={styles.selectedText}
        />


        <Text style={styles.label}>M√£ vi·ªác l√†m</Text>
        <TextInput
          style={styles.input}
          placeholder="VD: RN-2025-01"
          value={jobCode}
          onChangeText={(text) => setJobCode(text)}
        />

        <Text style={styles.label}>
          Ng√†nh ngh·ªÅ<Text style={styles.required}>*</Text>
        </Text>

        {/** Duy·ªát qua danh s√°ch ng√†nh ngh·ªÅ ƒë√£ ch·ªçn **/}
        {selectIndustryList.map((selected, index) => (
          <View
            key={index}
            style={{
              flexDirection: "row",
              alignItems: "center",
              marginHorizontal: 16,
              marginTop: 6,
              gap: 8,
            }}
          >
            <View style={{ flex: 1 }}>
              <Dropdown
                data={industries}
                labelField="name"
                valueField="id"
                placeholder="Vui l√≤ng ch·ªçn"
                value={selected}
                onChange={(item) => {
                  const updated = [...selectIndustryList];
                  updated[index] = item.id;
                  setSelectIndustryList(updated);
                }}
                style={styles.dropdown}
                placeholderStyle={styles.placeholder}
                selectedTextStyle={styles.selectedText}
              />
            </View>

            {index > 0 && (
              <TouchableOpacity
                onPress={() => {
                  const updated = selectIndustryList.filter((_, i) => i !== index);
                  setSelectIndustryList(updated);
                }}
              >
                <Ionicons name="trash-outline" size={22} color="red" />
              </TouchableOpacity>
            )}
          </View>
        ))}

        <TouchableOpacity
          onPress={() => setSelectIndustryList([...selectIndustryList, null])}
          style={{ marginHorizontal: 16, marginTop: 8 }}
        >
          <Text style={{ color: "#1a73e8", fontWeight: "500" }}>+ Th√™m danh m·ª•c</Text>
        </TouchableOpacity>


        <Text style={styles.label}>T·ª´ kh√≥a</Text>
        <TextInput
          style={styles.input}
          placeholder="VD: React Native, Frontend, Mobile App..."
        />

        <Text style={styles.label}>
          Tu·ªïi<Text style={styles.required}>*</Text>
        </Text>
        {/* --- Dropdown ch·ªçn lo·∫°i tu·ªïi --- */}
        <Dropdown
          data={getEnumOptions(AgeType)}
          labelField="label"
          valueField="value"
          placeholder="Ch·ªçn ƒëi·ªÅu ki·ªán ƒë·ªô tu·ªïi"
          value={ageType}
          onChange={(item) => setAgeType(item.value)}
          style={styles.dropdown}
          placeholderStyle={styles.placeholder}
          selectedTextStyle={styles.selectedText}
        />

        {/* --- N·∫øu ch·ªçn ‚ÄúTr√™n‚Äù th√¨ hi·ªán 1 √¥ nh·∫≠p --- */}
        {ageType === "ABOVE" && (
          <TextInput
            style={styles.input}
            placeholder="Nh·∫≠p ƒë·ªô tu·ªïi t·ªëi thi·ªÉu"
            keyboardType="numeric"
            value={minAge?.toString() ?? ""}   // number -> string
            onChangeText={(text) => {
              setMinAge(text ? parseFloat(text) : null);
            }}
          />
        )}

        {/* --- N·∫øu ch·ªçn ‚ÄúD∆∞·ªõi‚Äù th√¨ hi·ªán 1 √¥ nh·∫≠p --- */}
        {ageType === "BELOW" && (
          <TextInput
            style={styles.input}
            placeholder="Nh·∫≠p ƒë·ªô tu·ªïi t·ªëi ƒëa"
            keyboardType="numeric"
            value={maxAge?.toString() ?? ""}   // number -> string
            onChangeText={(text) => {
              setMaxAge(text ? parseFloat(text) : null);
            }}
          />
        )}

        {/* --- N·∫øu ch·ªçn ‚ÄúTrong kho·∫£ng‚Äù th√¨ hi·ªán 2 √¥ nh·∫≠p --- */}
        {ageType === "INPUT" && (
          <View style={{ flexDirection: "row", gap: 8, marginHorizontal: 16 }}>
            <TextInput
              style={[styles.input, { flex: 1 }]}
              placeholder="T·ª´ tu·ªïi"
              keyboardType="numeric"
              value={minAge?.toString() ?? ""}   // number -> string
              onChangeText={(text) => {
                setMinAge(text ? parseFloat(text) : null);
              }}
            />
            <TextInput
              style={[styles.input, { flex: 1 }]}
              placeholder="ƒê·∫øn tu·ªïi"
              keyboardType="numeric"
              value={maxAge?.toString() ?? ""}   // number -> string
              onChangeText={(text) => {
                setMaxAge(text ? parseFloat(text) : null);
              }}
            />
          </View>
        )}
        {/* ---------- TH√îNG TIN LI√äN H·ªÜ ---------- */}
        <Text style={styles.title}>Th√¥ng tin li√™n h·ªá</Text>

        <Text style={styles.label}>
          Ng∆∞·ªùi li√™n h·ªá<Text style={styles.required}>*</Text>
        </Text>
        <TextInput
          style={styles.input}
          placeholder="VD: L√™ H·ªØu Nam"
          value={contactName}
          onChangeText={setContactName}
        />

        <Text style={styles.label}>
          ƒêi·ªán tho·∫°i li√™n l·∫°c<Text style={styles.required}>*</Text>
        </Text>
        <TextInput
          style={styles.input}
          placeholder="VD: 0905 123 456"
          keyboardType="phone-pad"
          value={contactPhone}
          onChangeText={setContactPhone}
        />

        <Text style={styles.label}>
          ƒê·ªãa ƒëi·ªÉm<Text style={styles.required}>*</Text>
        </Text>
        <Dropdown
          data={listProvinces}
          labelField="name"
          valueField="id"
          placeholder="Ch·ªçn T·ªânh / Th√†nh ph·ªë"
          value={contactProvinceId}
          onChange={(item) => {
            setContactProvinceId(item.id)
          }}
          style={styles.dropdown}
          placeholderStyle={styles.placeholder}
          selectedTextStyle={styles.selectedText}
        />

        {/* --- Qu·∫≠n / Huy·ªán --- */}
        <Dropdown
          data={listContactDistricts
          }
          labelField="name"
          valueField="id"
          placeholder="Ch·ªçn Qu·∫≠n / Huy·ªán"
          value={contactDistrictdId}
          onChange={(item) => setContactDistrictId(item.id)}
          style={styles.dropdown}
          placeholderStyle={styles.placeholder}
          selectedTextStyle={styles.selectedText}
        />

        {/* --- S·ªë nh√† / ƒê·ªãa ch·ªâ chi ti·∫øt --- */}
        <TextInput
          style={styles.input}
          placeholder="VD: 123 Nguy·ªÖn Tr√£i, Ph∆∞·ªùng 5"
          value={contactDetailAddress}
          onChangeText={setContactDetailAddress}
        />

        <Text style={styles.label}>M√¥ t·∫£</Text>
        <View style={styles.richContainer}>
          <RichToolbar
            editor={richContact}
            actions={[actions.setBold, actions.setItalic, actions.setUnderline]}
            style={styles.toolbar}
          />
          <RichEditor
            ref={richContact}
            placeholder="Th√¥ng tin m√¥ t·∫£ chi ti·∫øt..."
            style={styles.richEditor}
            initialHeight={120}
            onChange={setDescription}
            initialContentHTML={description}
          />
        </View>

        {/* ---------- PH√ÇN C√îNG TH√ÄNH VI√äN ----------
        <Text style={styles.title}>Ph√¢n c√¥ng th√†nh vi√™n</Text>

        <Text style={styles.label}>Th√†nh vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng</Text>
        <View style={styles.pickerContainer}>
          <Picker selectedValue={assignedMember} onValueChange={setAssignedMember}>
            <Picker.Item label="Ch·ªçn th√†nh vi√™n" value="" />
            <Picker.Item label="Nguy·ªÖn VƒÉn A" value="a" />
            <Picker.Item label="Tr·∫ßn Th·ªã B" value="b" />
            <Picker.Item label="L√™ VƒÉn C" value="c" />
          </Picker>
        </View>

        <Text style={styles.label}>Th√™m email nh·∫≠n th√¥ng b√°o</Text>
        <TextInput
          style={styles.input}
          placeholder="VD: notify@nptsoftware.vn"
          value={notifyEmail}
          onChangeText={setNotifyEmail}
        />

        {/* ---------- NG√ÄY ƒêƒÇNG ---------- */}
        {/* <Text style={styles.title}>Ng√†y ƒëƒÉng</Text>
        <Text style={styles.label}>
          Ng√†y ƒëƒÉng<Text style={styles.required}>*</Text>
        </Text>
        <TextInput
          style={styles.input}
          value={postDate.toLocaleDateString("vi-VN")}
          editable={false}
        /> */}

        <Text style={styles.label}>
          Ng√†y h·∫øt h·∫°n<Text style={styles.required}>*</Text>
        </Text>
        <TouchableOpacity onPress={() => setDatePickerVisibility(true)} style={styles.input}>
          <Text>{formatDate(expiryDate)}</Text>
        </TouchableOpacity>

        {/* --- Modal ch·ªçn ng√†y --- */}
        <DateTimePickerModal
          isVisible={isDatePickerVisible}
          mode="date"
          onConfirm={handleConfirm}
          onCancel={hideDatePicker}
          date={expiryDate}
        />

        {/* ---------- NG√îN NG·ªÆ H·ªí S∆† ·ª®NG VI√äN ---------- */}
        {/* <Text style={styles.title}>Ng√¥n ng·ªØ nh·∫≠n h·ªì s∆° ·ª©ng vi√™n</Text>
        <View style={styles.pickerContainer}>
          <Picker selectedValue={language} onValueChange={setLanguage}>
            <Picker.Item label="Vui l√≤ng ch·ªçn" value="" />
            <Picker.Item label="Ti·∫øng Vi·ªát" value="vi" />
            <Picker.Item label="Ti·∫øng Anh" value="en" />
            <Picker.Item label="Song ng·ªØ Vi·ªát - Anh" value="both" />
          </Picker>
        </View> */}

        {/* ---------- N√öT SUBMIT ---------- */}
        <View style={styles.buttonRow}>
          <TouchableOpacity style={styles.saveBtn} onPress={() => Alert.alert("ƒê√£ l∆∞u nh√°p!")}>
            <Text style={styles.saveText}>L∆∞u vi·ªác l√†m</Text>
          </TouchableOpacity>

          <TouchableOpacity style={styles.submitBtn} onPress={handleSubmit}>
            <Text style={styles.submitText}>ƒêƒÉng c√¥ng vi·ªác</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </View>
  );
};

export default UpdateJobScreen;

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#fff" },
  header: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    backgroundColor: "#ffffffff",
    paddingVertical: 12,
    paddingHorizontal: 16,
  },
  headerTitle: { color: "#000000ff", fontSize: 18, fontWeight: "bold" },
  title: { fontSize: 20, fontWeight: "700", color: "#1a73e8", marginVertical: 16, paddingHorizontal: 16 },
  label: { fontSize: 15, fontWeight: "600", marginTop: 14, color: "#333", paddingHorizontal: 16 },
  required: { color: "red" },
  input: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    marginHorizontal: 16,
    marginTop: 6,
  },
  richContainer: {
    marginTop: 8,
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    overflow: "hidden",
    marginHorizontal: 16,
  },
  toolbar: { borderBottomWidth: 1, borderColor: "#ddd", backgroundColor: "#f5f5f5" },
  richEditor: { padding: 10, minHeight: 150, backgroundColor: "#fff" },
  submitBtn: {
    backgroundColor: "#1a73e8",
    borderRadius: 10,
    alignItems: "center",
    paddingVertical: 14,
    marginHorizontal: 1,
    flex: 1.5,
  },
  submitText: { color: "#fff", fontWeight: "bold", fontSize: 16 },
  buttonRow: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    gap: 10,
    marginTop: 20,
    marginBottom: 20,
    marginHorizontal: 16,
    backgroundColor: "#faf5f5ff",
  },
  saveBtn: {
    borderWidth: 1.5,
    borderColor: "#1a73e8",
    borderRadius: 10,
    alignItems: "center",
    paddingVertical: 14,
    paddingHorizontal: 10,
    flex: 1,
  },
  saveText: {
    color: "#1a73e8",
    fontWeight: "600",
    fontSize: 16,
  },
  dropdown: {
    height: 50,
    borderColor: "#ccc",
    borderWidth: 1,
    borderRadius: 8,
    marginHorizontal: 16,
    marginTop: 6,
    paddingHorizontal: 12,
    backgroundColor: "#fff",
  },
  placeholder: {
    color: "#999",
    fontSize: 15,
  },
  selectedText: {
    color: "#333",
    fontSize: 15,
    fontWeight: "500",
  },

});
